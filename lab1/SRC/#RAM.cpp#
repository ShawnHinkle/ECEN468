//===========================================
// Function : Asynchronous SRAM 
//===========================================
#include "systemc.h"

#define DATA_WIDTH        8 
#define ADDR_WIDTH        18 
#define RAM_DEPTH         1 << ADDR_WIDTH

SC_MODULE (RAM) 
{
	// ----- Declare Input/Output ports -----
	// Code Added by Chandrahas starts here
	sc_out <sc_uint<8> > OutData;
	sc_in <bool> bCE; 
	sc_in <bool> bWE;
	sc_in <sc_uint<18> > Addr;
	sc_in <sc_uint<8> > InData; 

	// ----- Internal variables -----
	sc_uint<8>  sram_memory[262144]; // 256K bytes declared as an character array

	// ----- Code Starts Here ----- 
	// Memory Write Block
  	void sram_write()
  	{
  		// Write Operation : When we_b = 0, ce_b = 0
  		// ...
  		if((bWE.read()==0)&&(bCE.read()==0))
  		{
  			sram_memory[Addr.read()] = InData.read();
                        cout<<
  		}

  	}	 
  	
  	// Memory Read Block
  	void sram_read()
  	{
  		  // Read Operation : When we_b = 1, ce_b = 0
  		  // ...
  		  if((bWE.read()==1)&&(bCE.read()==0))
  		  {
  		  	OutData.write(sram_memory[Addr.read()]);
  		  }  		
  	} 

  	// ----- Constructor for the SC_MODULE -----
  	// sensitivity list
  	SC_CTOR(RAM) 
  	{
		SC_METHOD(sram_write);
		SC_METHOD(sram_read);
		sensitive << Addr << bWE<< bCE << InData; // sensitivity list
	}
};

